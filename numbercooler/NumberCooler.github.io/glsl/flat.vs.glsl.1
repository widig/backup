
// flat.vs.glsl


attribute vec3 location;


uniform vec3 concept_by;
uniform vec3 concept_tox;
uniform vec3 concept_toy;
uniform vec3 concept_at;


uniform vec3 instance_by;
uniform vec3 instance_tox;
uniform vec3 instance_toy;
uniform vec3 instance_at;



uniform vec3 skeleton_by;
uniform vec3 skeleton_tox;
uniform vec3 skeleton_toy;
uniform vec3 skeleton_at;


uniform vec3 scene_by;
uniform vec3 scene_tox;
uniform vec3 scene_toy;
uniform vec3 scene_at;


uniform vec3 camera_by;
uniform vec3 camera_tox;
uniform vec3 camera_toy;
uniform vec3 camera_at;


uniform float aspect;
uniform float fov;
uniform float near;
uniform float far;




vec4 rotate(float angle,vec3 axis, vec4 target) { // prefer webgl
    float angle2 = angle/2.0; 
    float sinA = sin(angle2);
    float cosA = cos(angle2);
    float sinA2 = sinA * sinA;
    float sin2A = 2.0*sinA*cosA;
    float cos2A = 1.0 - 2.0*sinA2;
    float _2sinA2 = 2.0*sinA2;
    float x = axis.x;
    float y = axis.y;
    float z = axis.z;
    float len = sqrt(x * x + y * y + z * z);
    float xx = x*x;
    float yy = y*y;
    float zz = z*z;

    if (len == 0.0) {
        x = 0.0;
        y = 0.0;
        z = 1.0;
    } else if (len != 1.0) { 
        x /= len;
        y /= len;
        z /= len; 
    }
    mat4 o;
    if (x == 1.0 && y == 0.0 && z == 0.0) { // x rotation
        o = mat4(
            vec4( 1.0, 0.0, 0.0, 0.0 ),
            vec4( 0.0, 1.0, -sin2A, 0.0),
            vec4( 0.0, sin2A, cos2A, 0.0),
            vec4( 0.0, 0.0, 0.0, 1.0)
        );
    } else if (x == 0.0 && y == 1.0 && z == 0.0) { // y rotation
        o = mat4(
            vec4( cos2A, 0.0, sin2A, 0.0),
            vec4( 0.0, 1.0, 0.0, 0.0),
            vec4( -sin2A, 0.0, cos2A, 0.0),
            vec4( 0.0, 0.0, 0.0, 1.0)
        );
    } else if (x == 0.0 && y == 0.0 && z == 1.0) { // z rotation
        o = mat4(
            vec4( cos2A, -sin2A, 0.0, 0.0 ),
            vec4( sin2A, cos2A, 0.0, 0.0),
            vec4( 0.0, 0.0, 1.0, 0.0),
            vec4( 0.0, 0.0, 0.0, 1.0)
        );
    } else { // axis rotation
        o = mat4(
            vec4( 1.0 - (yy+zz)*_2sinA2, y*x*_2sinA2-z*sin2A, z*x*_2sinA2+y*sin2A, 0.0),
            vec4( x*y*_2sinA2+z*sin2A, 1.0-(zz+xx)*_2sinA2, z*y*_2sinA2-x*sin2A, 0.0),
            vec4( x*z*_2sinA2-y*sin2A, y*z*_2sinA2+x*sin2A, 1.0-(xx+yy)*_2sinA2, 0.0),
            vec4(0.0,0.0,0.0,1.0)
        );
    }
    return o * target;
}

vec4 orthogonal( float left, float right, float bottom, float top, float near, float far, vec4 target) {
    mat4 o = mat4(
        vec4(  2.0 / (right - left), 0.0, 0.0, - ( right + left ) / ( right - left ) ),
        vec4( 0.0, 2.0 / ( top - bottom ), 0.0, - (top + bottom) / (top - bottom) ),
        vec4( 0.0, 0.0, -2.0 / ( far - near ), - ( far + near ) / ( far - near ) ),
        vec4( 0.0, 0.0, 0.0, 1.0 )
    );
    return o * target;
}

vec4 perspective( float left, float right, float bottom, float top, float near, float far, vec4 target) {
    mat4 p = mat4(
        vec4( near * 2.0 / ( right - left ), 0, ( right + left ) / ( right - left ), 0 ),
        vec4( 0, near * 2.0 / ( top - bottom ), (top + bottom) / (top - bottom), 0 ),
        vec4( 0, 0, - ( far + near ) / ( far - near ), - ( far * near * 2.0 ) / ( far - near ) ),
        vec4( 0, 0, -1.0, 0 )
    );
    return p * target;
}
vec4 lookat(vec3 eye,vec3 center,vec3 up,vec4 target) { 
    vec3 diff = eye - center;
    vec3 rz = eye - center;
    vec3 ndiff = normalize(diff);
    vec3 nup = normalize(up);
    vec3 rx = cross( ndiff, nup );
    vec3 nrx = normalize(rx);
    vec3 ry = cross( ndiff, rx );
    vec3 nry = normalize(ry);
    vec3 nrz = normalize(rz);
    mat4 o = mat4(
        vec4(  nrx.x, nry.x, nrz.x, 0.0 ),
        vec4(  nrx.y, nry.y, nrz.y, 0.0 ),
        vec4(  nrx.z, nry.z, nrz.z, 0.0 ),
        vec4(  -eye.x, -eye.y, -eye.z, 1.0 )
    );
    return o * target;
}



void main(void) {
     float pi = 3.1415926535897932384626433832795;
     // scale concept
     vec3 o1 = vec3( location[0] * concept_by[0], location[1] * concept_by[1], location[2]* concept_by[2] );
     // rotate concept
     vec3 o0 = rotate(0.0*pi/180.0,vec3(1.0,0.0,0.0),vec4(o1,0.0)).xyz;
     o0 = rotate(0.0*pi/180.0,vec3(0.0,1.0,0.0),vec4(o0,0.0)).xyz;
     o0 = rotate(0.0*pi/180.0,vec3(0.0,0.0,1.0),vec4(o0,0.0)).xyz;
     // translate concept
     vec3 o2 = o0 + concept_at;


     // scale instance
     vec3 i1 = vec3( o2[0] * instance_by[0], o2[1] * instance_by[1], o2[2] * instance_by[2] );
     // rotate instance
     vec3 i0 = vec3(0.0,0.0,0.0);
     // translate instance
     vec3 i2 = i1 + instance_at;

     // scale skeleton
     vec3 sk1 = vec3( i2[0] * skeleton_by[0], i2[1] * skeleton_by[1], i2[2] * skeleton_by[2] );
     // rotate skeleton
     vec3 sk0 = vec3( 0.0, 0.0, 0.0 );
     // translate skeleton
     vec3 sk2 = sk1 + skeleton_at;

     // scale scene
     vec3 sc1 = vec3( sk2[0] * scene_by[0], sk2[1] * scene_by[1], sk2[2] * scene_by[2] );
     // rotate scene
     vec3 sc0 = vec3( 0.0, 0.0, 0.0 );
     // translate scene
     vec3 sc2 = sc1 + scene_at;



     // scale camera 
     vec3 ca1 = vec3( sc2[0] * camera_by[0], sc2[1] * camera_by[1], sc2[2] * camera_by[2] );




     // rotate and translate

     // current camera_tox is always the front vector

    //vec3 _mock0 = camera_at;
    // vec3 _mock1 = camera_at + camera_tox; // direction of current view
    // vec3 _mock2 = camera_toy; // up vector can't be pointed by camera, it's always up of camera
    // vec4 ca2 = lookat( _mock1, _mock0, _mock2, vec4(ca1,1.0) );
     
     float cosC0 = dot( ca1 - camera_at, camera_tox); // cos ( front and point )
     float sinC0 = length( cross( ca1 - camera_at, camera_tox ) ) / ( length( ca1 - camera_at ) * length( camera_tox ) );
     // C0 is the angle between drawing point and camera front (abstract 0.0 deg)

     float cosC1 = dot( camera_tox, vec3(0.0,0.0,1.0) );
     float sinC1 = length( cross( camera_tox, vec3(0.0,0.0,1.0) ) ) / ( length(camera_tox) );
     // C1 is the angle between drawing point and z positive ( abstract y rotation )

     float cosD0 = dot( ca1 - camera_at, camera_toy); // cos ( front and point )
     float sinD0 = length( cross( ca1 - camera_at, camera_toy ) ) / ( length( ca1 - camera_at ) * length( camera_toy ) );
     // D0 is the angle between drawing point and camera up (abstract 90.0 deg)

     float cosD1 = dot( camera_toy, vec3(0.0,1.0,0.0) );
     float sinD1 = length( cross(  camera_toy, vec3(0.0,1.0,0.0) ) ) / ( length(camera_toy) );
     // D1 is the angle between drawing point and y positive ( abstract x rotation )


     vec3 ca2 = ca1 + camera_at;


     vec3 ca0 = rotate(0.0*pi/180.0,vec3(1.0,0.0,0.0),vec4(ca2,0.0)).xyz;

     float ac1 = atan(sinC1/cosC1) + pi;
     ca0 = rotate(ac1,camera_toy,vec4(ca0,0.0)).xyz;

     ca0 = rotate(0.0*pi/180.0,vec3(0.0,0.0,1.0),vec4(ca0,0.0)).xyz;
     vec4 pos = vec4(ca0,1.0);

     // the bigger the aspect more widthness can get into screen the lower less widthness something like horizontal convex len, it wont change height range.

     float _a = near * tan( (fov/2.0) * pi / 180.0 );
     float _b = aspect * _a;

     float left = -_b;
     float right = _b;
     float bottom = -_a;
     float top = _a;

     // URGENT
     // if you force left right bottom up to x E [-1,1], y E [-1,1], them the fov will change, so it is other angles to set full screen mode, so do not do this until camera is ready to fly.

     // unlimited camera will lead to parallax.
     // sending to pipeline
     gl_Position = orthogonal(left,right,bottom,top,near,far,pos);
     gl_PointSize = 1.0;
}